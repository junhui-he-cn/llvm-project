//===---- HCPUISelDAGToDAG.h - A Dag to Dag Inst Selector for HCPU --------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the HCPU target.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_HCPU_HCPUISELDAGTODAG_H
#define LLVM_LIB_TARGET_HCPU_HCPUISELDAGTODAG_H

#include "HCPU.h"
#include "HCPUSubtarget.h"
#include "HCPUTargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/Type.h"
#include "llvm/Support/CodeGen.h"
#include "llvm/Support/Debug.h"

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// HCPUDAGToDAGISel - HCPU specific code to select HCPU machine
// instructions for SelectionDAG operations.
//===----------------------------------------------------------------------===//
namespace llvm {

class HCPUDAGToDAGISel : public SelectionDAGISel {
public:
  explicit HCPUDAGToDAGISel(HCPUTargetMachine &TM, CodeGenOptLevel OL)
      : SelectionDAGISel(TM, OL), Subtarget(nullptr) {}

  bool runOnMachineFunction(MachineFunction &MF) override;

protected:
  /// Keep a pointer to the HCPUSubtarget around so that we can make the right
  /// decision when generating code for different targets.
  const HCPUSubtarget *Subtarget;

private:
// Include the pieces autogenerated from the target description.
#include "HCPUGenDAGISel.inc"

  /// getTargetMachine - Return a reference to the TargetMachine, casted
  /// to the target-specific type.
  const HCPUTargetMachine &getTargetMachine() {
    return static_cast<const HCPUTargetMachine &>(TM);
  }

  void Select(SDNode *N) override;

  virtual bool trySelect(SDNode *Node) = 0;

  // Complex Pattern.
  bool SelectAddr(SDNode *Parent, SDValue N, SDValue &Base, SDValue &Offset);

  // getImm - Return a target constant with the specified value.
  inline SDValue getImm(const SDNode *Node, unsigned Imm) {
    return CurDAG->getTargetConstant(Imm, SDLoc(Node), Node->getValueType(0));
  }

  virtual void processFunctionAfterISel(MachineFunction &MF) = 0;

  SDNode *getGlobalBaseReg();

  bool SelectInlineAsmMemoryOperand(const SDValue &Op, InlineAsm::ConstraintCode ConstraintID,
                                    std::vector<SDValue> &OutOps) override;
};

class HCPUDAGToDAGISelLegacy : public SelectionDAGISelLegacy {
public:
  static char ID;
  HCPUDAGToDAGISelLegacy(std::unique_ptr<SelectionDAGISel> S);
  void getAnalysisUsage(AnalysisUsage &AU) const override;
  // StringRef getPassName() const {
  //   return "HCPU DAG->DAG Pattern Instruction Selection";
  // }
};
} // namespace llvm

#endif
