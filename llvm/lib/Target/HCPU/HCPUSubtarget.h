//===-- HCPUSubtarget.h - Define Subtarget for the HCPU ---------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the HCPU specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_HCPU_HCPUSUBTARGET_H
#define LLVM_LIB_TARGET_HCPU_HCPUSUBTARGET_H

#include "HCPUInstrInfo.h"
#include "HCPUFrameLowering.h"
#include "HCPUISelLowering.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/MC/MCInstrItineraries.h"
#include <memory>
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "HCPUGenSubtargetInfo.inc"

extern bool HCPUReserveGP;
extern bool HCPUNoCpload;
namespace llvm {
class StringRef;
class HCPUTargetMachine;

class HCPUSubtarget : public HCPUGenSubtargetInfo {
  virtual void anchor();

protected:
  enum HCPUArchEnum { HCPU32I, HCPU32II };

  HCPUArchEnum HCPUArchVersion;

  bool IsLittle;
  bool EnableOverflow;
  bool HasCmp;
  bool HasSlt;
  bool UseSmallSection;

  InstrItineraryData InstrItins;

  const HCPUTargetMachine &TM;

  Triple TargetTriple;

  const SelectionDAGTargetInfo TSInfo;

  std::unique_ptr<const HCPUInstrInfo> InstrInfo; 
  std::unique_ptr<const HCPUFrameLowering> FrameLowering;
  std::unique_ptr<const HCPUTargetLowering> TLInfo;

public:
  bool isPositionIndependent() const;
  const HCPUABIInfo &getABI() const;

  /// This constructor initializes the data members to match that
  /// of the specified triple.
  HCPUSubtarget(const Triple &TT, StringRef CPU, StringRef FS, bool little,
                const HCPUTargetMachine &_TM);

  //- Vitual function, must have
  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  bool isLittle() const { return IsLittle; }
  bool hasHCPU32I() const { return HCPUArchVersion >= HCPU32I; }
  bool isHCPU32I() const { return HCPUArchVersion == HCPU32I; }
  bool hasHCPU32II() const { return HCPUArchVersion >= HCPU32II; }
  bool isHCPU32II() const { return HCPUArchVersion == HCPU32II; }

  /// Features related to the presence of specific instructions.
  bool enableOverflow() const { return EnableOverflow; }
  bool disableOverflow() const { return !EnableOverflow; }
  bool hasCmp() const { return HasCmp; }
  bool hasSlt() const { return HasSlt; }
  bool useSmallSection() const { return UseSmallSection; }


  bool abiUsesSoftFloat() const;
  bool enableLongBranchPass() const { return hasHCPU32II(); }

  unsigned stackAlignment() const { return 8; }

  HCPUSubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS,
                                                 const TargetMachine &TM);

  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }

  const HCPUInstrInfo *getInstrInfo() const override { return InstrInfo.get(); }

  const TargetFrameLowering *getFrameLowering() const override {
    return FrameLowering.get();
  }

  const HCPURegisterInfo *getRegisterInfo() const override {
    return &InstrInfo->getRegisterInfo();
  }

  const HCPUTargetLowering *getTargetLowering() const override {
    return TLInfo.get();
  }

  const InstrItineraryData *getInstrItineraryData() const override {
    return &InstrItins;
  }
};
} // namespace llvm

#endif